

1. 스프링 컨테이너의 기본 전략
	- 스프링 컨테이너는 트랜잭션 범위의 영속성 컨텍스트 전략을 기본으로 사용한다.
	- 트랜잭션을 커밋하면 JPA는 먼저 영속성 컨텍스트를 플러시해서 변경 내용을 데이터베이스에 반영한 후에 데이터베이스 트랜잭션을 커밋한다.
	- 만약 예외가 발생하면 트랜잭션을 롤백하고 종료하는데 이때는 플러시를 호출하지 않는다.
	- 트랜잭션이 같으면 같은 영속성 컨텍스트를 사용한다. 반대로 트랜잭션이 다르면 다른 영속성 컨텍스트를 사용한다. -> 멀티 스레드 상황에서 안전하다.

2. 준영속 상태와 지연 로딩
	- 조회한 엔티티가 서비스와 리포지토리 계층에서는 영속성 컨텍스트에 관리되면서 영속상태를 유지하지만, 컨트롤러나 뷰 같은 프리젠테이션 계칭에서는 준영속 상태가 된다.
	- 따라서 트랜잭션이 없는 프리젠테이션 계층에서 엔티티는 준영속상태다. 그러므로 변경감지와 지연로딩이 동작하지 않는다. 컨트롤러에서 지연로딩을 호출하면 예외가 발생한다.
	- 뷰를 렌더링할 때 연관된 엔티티를 사용하면 초기화를 시도한다. 하지만 준영속 상태는 영속성 컨텍스트가 없으므로 지연 로딩을 할 수 없다. 이 때 지연로딩을 시도하면 문제가 발생한다.(구현체마다 다름. hibernate : LazyInitializationException)
	- 준영속 상태의 지연로딩을 해결하는 방법은 크게 2가지가 있다.
		(1) 뷰가 필요한 엔티티를 미리 로딩
			* 글로벌 페치 전략 수정
				-> 즉시로딩을 하면 N+1 성능이슈가 있다. 지연로등으로 한 후 JPQL 페치조인으로 해결할 수 있다.
				
			* JPQL 페치 조인
				-> N+1 성능을 해결할 수 있다.
				-> 화면에 맞춘 리포지토리 메소드가 증가할 수 있다. 결국 프레젠테이션 계층이 알게 모르게 데이터 접근 계층을 침범한다.
					ex) 화면 A에는 order만 조회. 화면 B에는 order과 member 조회. 그럼 화면 A를 위한 메소드와 화면 B를 위한 메소드가 나뉘게 된다.
					--> 그렇기 때문에 화면 A에 member가 필요없지만 B에서 사용한 메소드를 사용하도록 타협하는 것이 중요하다.
			
			* 강제로 초기화
				-> 영속성 컨텍스트가 살아있을 때 프리젠테이션 계층이 필요한 엔티티를 강제로 초기화해서 반환하는 방법.
				-> 그러나 뷰가 필요한 엔티티에 따라 서비스 계층의 로직을 변경하므로 은근 슬쩍 프리젠테이션 계층이 서비스 계층을 침범한다.
				
		(2) OSIV를 사용해 엔티티를 항상 영속상태로 유지
			- 모든 문제는 엔티티가 프리젠테이션 계층에서 준영속 상태이기 때문에 발생하낟.
			- 영속성 컨텍스트를 뷰까지 살아있게 열어두자. 그럼 뷰에서도 지연 로딩을 사용할 수 있는데 이것이 OSIV(Open Session In View)이다.
	
	- FACADE 계층 추가
		- 프리젠테이션 계층과 서비스 계층 사이에 FACADE 계층을 하나 더 두는 것이다.
		- 뷰를 위한 프록시 초기화는 이곳에서 담당한다. -> 서비스 계층과 프리젠테이션 계층 사이에 논리적인 의존성을 분리할 수 있다.
		- FACADE 계층의 역할과 특성.
			(1) 프리젠테이션 계층과 도메인 모델 계층 간의 논리적 의존성을 분리해준다.
			(2) 프리젠테이션 계층에서 필요한 프록시 객체를 초기화한다.
			(3) 서비스 계층을 호출해서 비즈니스 로직을 실행한다.
			(4) 리포지토리를 직접 호출해서 뷰가 요구하는 엔티티를 찾는다.
		- 최대 단점은 중간에 계층 하나가 더 끼어든다는 것이다... -> 더 많은 코드를 작성해야한다. -> 단순히 서비스 계층을 호출만 하는 위임 코드가 상당히 많아질 것이다.
	
3. OSIV(Open Session In View) -----> hibernate에서 사용하는 용어임. JPA에서는 OEIV(Open EntityManager In View)라고 하지만 관례상 모두 OSIV라고 한다.
	- 과거 OSIV
		- 과거 OSIV는 클라이언트 요청이 들어오자마자 서블릿 필터나 스프링 인터셉터에서 트랜잭션을 시작하고 요청이 끝날 때 트랜잭션도 끝내는 것이다. 이것을 "요청 당 트랜잭션(Transaction per request)방식" 이라고 한다.
		- 최대 단점은 컨트롤러나 뷰 같은 프리젠테이션 계층이 엔티티를 변경할 수 있다는 것이다.
			- ex) 단순히 고객명을 마스킹해서 view에 보여주고 싶어서 고객의 이름을 "XXX"로 하고 렌더링 하는 순간, 트랜잭션이 커밋되기 전 영속성 컨텍스트가 flush된다.
			
		- 결국 프리젠테이션 계층에서 엔티티를 수정하지 못하게 하는 방법들로 해야한다. 대표적으로 3가지 방법이 있다.
			(1) 엔티티를 읽기 전용 인터페이스로 제공
			(2) 엔티티 레핑
			(3) DTO만 반환
			
		- 위 방식 모두 코드의 양이 증가하는 단점이 있다.
		
	- 스프링 OSIV
		- spring-orm.jar는 다양한 OSIV 클래스를 제공한다. OSIV를 서블릿 필터에서 적용할지 스프링 인터셉터에서 적용할지에 따라 원하는 클래스를 선택해서 사용하면 된다.
			(1) 하이버네이트 OSIV 서블릿 필터
			(2) 하이버네이트 OSIV 스프링 인터셉터
			(3) JPA OEIV 서블릿 필터 
			(4) JPA OEIV 스프링 인터셉터
		
		- 스프링 프레임워크가 제공하는 OSIV는 "비즈니스 계층에서 트랜잭션을 사용하는 OSIV"이다. 즉 OSIV를 사용하지만 트랜잭션은 비즈니스 계층에서만 사용한다.
		- 엔티티를 변경하지 않고 단순히 조회만 할 때는 트랜잭션이 없어도 되는데 이것을 "트랜잭션 없이 읽기"라고한다.
		- 스프링이 제공하는 OSIV는 프리젠테이션 계층에서는 트랜잭션이 없으므로 수정할 수 없다. 따라서 프리젠테이션 계층에서 엔티티를 수정할 수 있었던 과거 OSIV의 단점을 보완했다. -> 프리젠테이션 계층에서 지연로딩을 할 수 있다.
		- 스프링 OSIV의 특징 정리.
			(1) 영속성 컨텍스트를 프리젠테이션 계층까지 유지한다.
			(2) 프리젠테이션 계층에는 트랜잭션이 없으므로 엔티티를 수정할 수 없다.
			(3) 프리젠테이션 계층에는 트랜잭션이 없즈만 트랜잭션 없이 읽기를 사용하기 때문에 지연 로딩을 할 수 있다.
		
		- 트랜잭션 범위 밖인 프리젠테이션에서 영속성 컨텍스트의 flush를 강제로 호출하면 데이터를 수정할 수 없다는 예외를 만나게 된다.(javax.persistence.TransactionRequiredException: no transaction is in progress)
	
	- 스프링 OSIV 주의사항.
		- 프리젠테이션 계층에서 엔티티를 수정한 직후에 트랜잭션을 시작하는 서비스 계층을 호출하면 문제가 발생한다.
			-> 프리젠테이션 계층에서 member의 변경을 "XXX"로 변경 후, memberService에서 수정하는 로직을 실행시키면 트랜잭션 AOP가 트랜잭션을 커밋하고 영속성 컨텍스트를 플러시한다. 그리고 변경 감지가 동작되면서 회원 엔티티의 수정사항을 데이터베이스에 반영한다.
		- 단순한 해결 방법은 비즈니스 로직을 모두 호출 한 후, 프리젠테이션에서 엔티티를 변경하면 된다.
		























