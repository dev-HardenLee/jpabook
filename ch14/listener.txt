

1. 리스너
	- 모든 엔티티를 대상으로 언제 어떤 사용자가 삭제를 요청했는지 모두 로그를 남겨야 하는 요구사항이 있다하자.
	  이 때 애플리케이션 삭제 로직을 하나씩 찾아서 로그를 남기는 것은 너무 비효율적이다.
	  JPA 리스너 기능을 사용하면 엔티티의 생명주기에 따른 이벤트를 처리할 수 있다.
	 
	- 엔티티 생명주기.
		--- read
		1. PostLoad   : 엔티티가 영속성 컨텍스트에 조회된 직후 또는 refresh를 호출한 후(2차 캐시에 저장되어있어도 호출됨.)
		
		--- save & update
		2. PrePersist : persist()메소드를 호출해서 엔티티를 영속성 컨텍스트에 관리하기 직전에 호출된다. merge()할 때도 수행된다.
		3. PreUpdate  : flush()나 commit()을 호출해서 엔티티를 데이터베이스에 수정하기 직전에 호출된다.
		
		--- delete
		4. PreRemove   : remove()메소드를 호출해서 엔티티를 영속성 컨텍스트에서 삭제하기 직전에 호출된다. 또한 삭제 명령어로 영속성 전이가 일어날 때도 호출된다.
		
		--- 실제 DB 접근
		5. PostPersist : flush()나 commit()을 호출해서 엔티티를 데이터베이스에 저장한 직후 호출. 식별자 항상 존재.
		6. PostUpdate  : flush()나 commit()을 호출해서 엔티티를 데이터베이스에 수정한 직후 호출.
		7. PostRemove  : flush()나 commit()을 호출해서 엔티티를 데이터베이스에 삭제한 직후 호출.
		
	- 이벤트 적용위치
		1. 엔티티에 직접 적용
			- 어노테이션을 활용하여 등록.
			
		2. 별도의 리스너 등록
			- 리스너 클래스를 생성한다. 반환타입은 void여야 하고, 특정 타입이 확실하면 특정 타입을 인자로 받으면 된다.
			- 엔티티 클래스에 @EntityListeners 어노테이션을 명시한다.
		
		3. 기본 리스너 사용
			- META-INF/orm.xml에 기본 리스너를 등록하면 된다.
			
	- 이벤트 호출 순서
		1. 기본 리스너
		2. 부모 클래스 리스너
		3. 리스너
		4. 엔티티





























		